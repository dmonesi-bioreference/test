name: deploy-container

# Begin a release build every time a push to main occurs.
#
on:
  push:
    # Branch names must match with app service slot names
    branches: [dev, stage]

jobs:
  deploy-docker-container:
    runs-on: ubuntu-20.04

    steps:
      - name: Get branch name
        shell: bash
        run: |
          branch=${GITHUB_REF#refs/heads/}
          echo "##[set-output name=branch_name;]$(echo ${branch})"
          echo "##[set-output name=branch_name_uppercase;]$(echo ${branch^^})"
        id: get_branch_name

      - name: Generate image tag
        shell: bash
        run: echo "##[set-output name=tag;]$(echo ${GITHUB_REF#refs/heads/}-${GITHUB_SHA::8})"
        id: generate_tag

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ACR_HOST }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASS }}

      - name: Build and push (tag = ${{ steps.generate_tag.outputs.tag }})
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ secrets.ACR_HOST }}/pandas:${{ steps.generate_tag.outputs.tag }}
          build-args: |
            GTM_ID=${{ secrets[format('GTM_ID_{0}', steps.get_branch_name.outputs.branch_name_uppercase)] }}
            PIMCORE_DOMAIN=${{ secrets.PIMCORE_DOMAIN }}

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Update image tag on webapp
        run: |
          az webapp config set \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
            --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
            --slot "${{ steps.get_branch_name.outputs.branch_name }}" \
            --linux-fx-version "DOCKER|genedxacr.azurecr.io/pandas:${{ steps.generate_tag.outputs.tag }}"

      - name: Configure Identity provider for patient-* url
        run: |
          az webapp config appsettings set \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
            --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
            --slot "${{ steps.get_branch_name.outputs.branch_name }}" \
            --slot-settings \
              AUTH0_SECRET="${{ secrets.AUTH0_SECRET }}" \
              AUTH0_BASE_URL="https://patient-${{ steps.get_branch_name.outputs.branch_name }}.genedx.com" \
              AUTH0_ISSUER_BASE_URL=https://${{ secrets.AUTH0_DOMAIN }} \
              AUTH0_CLIENT_ID="${{ secrets.AUTH0_CLIENT_ID }}" \
              AUTH0_CLIENT_SECRET="${{ secrets.AUTH0_CLIENT_SECRET }}" \
              IDENTITY_CLIENT_ID="${{ secrets.IDENTITY_CLIENT_ID }}" \
              IDENTITY_CLIENT_SECRET="${{ secrets.IDENTITY_CLIENT_SECRET }}" \
              PROVIDER_PORTAL_BASE_URL="${{ secrets.PROVIDER_PORTAL_BASE_URL }}" \
              PROVIDER_PORTAL_API_BASIC_AUTH_USERNAME="${{ secrets.PROVIDER_PORTAL_API_BASIC_AUTH_USERNAME }}" \
              PROVIDER_PORTAL_API_BASIC_AUTH_PASSWORD="${{ secrets.PROVIDER_PORTAL_API_BASIC_AUTH_PASSWORD }}" \
              PROVIDER_PORTAL_API_REFERER="${{ secrets.PROVIDER_PORTAL_API_REFERER }}" \
              PIMCORE_URL="${{ secrets.PIMCORE_URL }}" \
              PIMCORE_KEY="${{ secrets.PIMCORE_KEY }}" \
              NEXT_PUBLIC_PIMCORE_DOMAIN="${{ secrets.PIMCORE_DOMAIN }}" \
              NEXT_PUBLIC_GTM_ID="${{ secrets[format('GTM_ID_{0}', steps.get_branch_name.outputs.branch_name_uppercase)] }}"

      # Wait for the site to be restarted before we start vulnerability scan
      - name: Wait for 30 seconds...
        shell: bash
        run: sleep 30s

      # Run vulnerability scan only when the code is merged into stage branch
      - name: Start vulnerability scan
        if: ${{ steps.get_branch_name.outputs.branch_name == 'stage' }}
        id: netsparker-enterprise-scan-step
        uses: netsparker/Netsparker-Cloud-GitHub-Actions@v0.0.1
        with:
          website-id: ${{ secrets.NETSPARKER_WEBSITE_ID }}
          scan-type: 'FullWithPrimaryProfile'
          profile-id: ${{ secrets.NETSPARKER_PROFILE_ID }}
          user-id: ${{ secrets.NETSPARKER_USER_ID }}
          api-token: ${{ secrets.NETSPARKER_TOKEN }}
          base-url: 'https://www.netsparkercloud.com'

      - name: Vulnerability Scan output
        if: ${{ steps.get_branch_name.outputs.branch_name == 'stage' }}
        run: echo "${{ steps.netsparker-enterprise-scan-step.outputs.scan-message }}"
